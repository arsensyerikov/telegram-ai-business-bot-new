import openai
from config import OPENAI_API_KEY
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.main_menu import main_menu
from config import ADMIN_ID
from database.db import add_appointment, get_all_appointments
from config import ADMIN_ID
from database.db import clear_appointments
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.db import update_contacts, get_contacts

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏ (—Ñ–æ—Ä–º–∞)
class Form(StatesGroup):
    name = State()
    service = State()
    datetime = State()
    phone = State()

# –°—Ç–∞—Ä—Ç
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ß–∏–º —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=main_menu)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å"
async def start_booking(message: types.Message):
    await Form.name.set()
    await message.answer("–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")

async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await Form.next()
    await message.answer("–Ø–∫—É –ø–æ—Å–ª—É–≥—É –≤–∏ –±–∞–∂–∞—î—Ç–µ?", reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton("–ú–∞—Å–∞–∂ —Å–ø–∏–Ω–∏")],
            [types.KeyboardButton("–†–µ–ª–∞–∫—Å –º–∞—Å–∞–∂")],
            [types.KeyboardButton("–û–∑–¥–æ—Ä–æ–≤—á–∏–π –º–∞—Å–∞–∂")]
        ], resize_keyboard=True, one_time_keyboard=True
    ))

async def get_service(message: types.Message, state: FSMContext):
    await state.update_data(service=message.text)
    await Form.next()
    await message.answer("–ù–∞ —è–∫—É –¥–∞—Ç—É/—á–∞—Å —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25 –∫–≤—ñ—Ç–Ω—è, 15:00)")

async def get_datetime(message: types.Message, state: FSMContext):
    await state.update_data(datetime=message.text)
    await Form.next()
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?")

async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    add_appointment(data['name'], data['service'], data['datetime'], data['phone'])
    await message.answer("–î—è–∫—É—î–º–æ! –ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É üôå", reply_markup=main_menu)


    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–¥–º—ñ–Ω—É
    text = (
        f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n\n"
        f"üë§ –Ü–º º—è: {data['name']}\n"
        f"üõé –ü–æ—Å–ª—É–≥–∞: {data['service']}\n"
        f"üìÜ –î–∞—Ç–∞/—á–∞—Å: {data['datetime']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
    )
    await message.bot.send_message(chat_id=ADMIN_ID, text=text)
    await state.finish()

def register_handlers_user(dp: Dispatcher):
    dp.register_message_handler(start_command, commands="start")
    dp.register_message_handler(start_booking, lambda m: m.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å")
    dp.register_message_handler(get_name, state=Form.name)
    dp.register_message_handler(get_service, state=Form.service)
    dp.register_message_handler(get_datetime, state=Form.datetime)
    dp.register_message_handler(get_phone, state=Form.phone)
    dp.register_message_handler(send_contacts, lambda m: m.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
    dp.register_message_handler(start_ai_chat, lambda m: m.text == "üí¨ –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")
    dp.register_message_handler(handle_ai_question, state="ai_chat")
    dp.register_message_handler(show_appointments, commands="–∑–∞–ø–∏—Å–∏")
    dp.register_message_handler(clear_all_appointments, commands="–æ—á–∏—Å—Ç–∏—Ç–∏")
    dp.register_message_handler(start_contact_update, commands="–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
    dp.register_message_handler(set_telegram, state=ContactForm.telegram)
    dp.register_message_handler(set_whatsapp, state=ContactForm.whatsapp)
    dp.register_message_handler(set_instagram, state=ContactForm.instagram)



async def send_contacts(message: types.Message):
    contacts = get_contacts()
    if not contacts:
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ.")
        return
    text = (
        "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏:\n\n"
        f"üí¨ Telegram: {contacts[0]}\n"
        f"üìû WhatsApp: {contacts[1]}\n"
        f"üì∏ Instagram: {contacts[2]}"
    )
    await message.answer(text)


# –°–ª–æ–≤–Ω–∏–∫ –ø—Å–µ–≤–¥–æ-AI
faq_responses = {
    "—Ü—ñ–Ω–∞": "üí∏ –ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏ –≤—ñ–¥ 500 –≥—Ä–Ω. –£—Ç–æ—á–Ω—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ—Å–ª—É–≥—É üôå",
    "–∞–¥—Ä–µ—Å–∞": "üìç –ú–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—å –Ω–∞ –≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞ 25, –æ—Ñ—ñ—Å 3.",
    "–≥—Ä–∞—Ñ—ñ–∫": "üïí –ü—Ä–∞—Ü—é—î–º–æ –∑ 10:00 –¥–æ 20:00 —â–æ–¥–Ω—è, –æ–∫—Ä—ñ–º –Ω–µ–¥—ñ–ª—ñ.",
    "–ø—Ä–∏–≤—ñ—Ç": "–í—ñ—Ç–∞—é! –Ø –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫. –Ø–∫ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"
}

# –ü–æ—á–∞—Ç–∏ AI-—á–∞—Ç
async def start_ai_chat(message: types.Message, state: FSMContext):
    await state.set_state("ai_chat")
    await message.answer("üí¨ –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è:")

# –í—ñ–¥–ø–æ–≤—ñ–¥—å AI
# –ü—Å–µ–≤–¥–æ-AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
faq_responses = {
    "—Ü—ñ–Ω–∞": "üí∏ –ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏ –≤—ñ–¥ 500 –≥—Ä–Ω. –£—Ç–æ—á–Ω—ñ—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ—Å–ª—É–≥—É üôå",
    "–≤–∞—Ä—Ç—ñ—Å—Ç—å": "üí∏ –ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –ø–æ—Å–ª—É–≥–∏. –ù–∞–ø–∏—à—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å!",
    "–∞–¥—Ä–µ—Å–∞": "üìç –ú–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—å –Ω–∞ –≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞ 25, –æ—Ñ—ñ—Å 3.",
    "–≥—Ä–∞—Ñ—ñ–∫": "üïí –ü—Ä–∞—Ü—é—î–º–æ –∑ 10:00 –¥–æ 20:00 —â–æ–¥–Ω—è, –æ–∫—Ä—ñ–º –Ω–µ–¥—ñ–ª—ñ.",
    "–ø—Ä–∏–≤—ñ—Ç": "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫. –Ø–∫ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?"
}

async def handle_ai_question(message: types.Message, state: FSMContext):
    await state.finish()
    text = message.text.lower()
    reply = None
    for keyword, answer in faq_responses.items():
        if keyword in text:
            reply = answer
            break
    if reply:
        await message.answer(reply)
    else:
        await message.answer("ü§ñ –í–∏–±–∞—á, —è —â–µ –≤—á—É—Å—è. –°–ø—Ä–æ–±—É–π —ñ–Ω–∞–∫—à–µ —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è.")


async def show_appointments(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    appointments = get_all_appointments()
    if not appointments:
        await message.answer("–ó–∞–ø–∏—Å—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
        return
    text = "üìã –£—Å—ñ –∑–∞–ø–∏—Å–∏:\n\n"
    for app in appointments:
        text += (
            f"üë§ {app[1]}\nüõé {app[2]}\nüìÖ {app[3]}\nüìû {app[4]}\n\n"
        )
    await message.answer(text)


async def clear_all_appointments(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    clear_appointments()
    await message.answer("‚úÖ –£—Å—ñ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω–æ.")

class ContactForm(StatesGroup):
    telegram = State()
    whatsapp = State()
    instagram = State()


async def start_contact_update(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(ContactForm.telegram)
    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π Telegram (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @yourname)")

async def set_telegram(message: types.Message, state: FSMContext):
    await state.update_data(telegram=message.text)
    await state.set_state(ContactForm.whatsapp)
    await message.answer("–í–≤–µ–¥–∏ WhatsApp (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380501234567)")

async def set_whatsapp(message: types.Message, state: FSMContext):
    await state.update_data(whatsapp=message.text)
    await state.set_state(ContactForm.instagram)
    await message.answer("–í–≤–µ–¥–∏ Instagram (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: @yourbusiness)")

async def set_instagram(message: types.Message, state: FSMContext):
    data = await state.update_data(instagram=message.text)
    d = await state.get_data()
    update_contacts(d['telegram'], d['whatsapp'], d['instagram'])
    await message.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()